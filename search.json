[
  {
    "objectID": "deck.html",
    "href": "deck.html",
    "title": "deck",
    "section": "",
    "text": "source\n\nDeck\n\n Deck ()\n\nA deck of 52 cards, not including jokers\nWhen we initially create a deck, all of the cards will be present:\n\ndeck = Deck()\ndeck\n\nA♣️; 2♣️; 3♣️; 4♣️; 5♣️; 6♣️; 7♣️; 8♣️; 9♣️; 10♣️; J♣️; Q♣️; K♣️; A♠️; 2♠️; 3♠️; 4♠️; 5♠️; 6♠️; 7♠️; 8♠️; 9♠️; 10♠️; J♠️; Q♠️; K♠️; A♥️; 2♥️; 3♥️; 4♥️; 5♥️; 6♥️; 7♥️; 8♥️; 9♥️; 10♥️; J♥️; Q♥️; K♥️; A♦️; 2♦️; 3♦️; 4♦️; 5♦️; 6♦️; 7♦️; 8♦️; 9♦️; 10♦️; J♦️; Q♦️; K♦️\n\n\nThat should be 52 cards\n\ntest_eq(len(deck),52)\n\n\nsource\n\n\nDeck.pop\n\n Deck.pop (idx:int=-1)\n\nRemove one card from the deck\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nidx\nint\n-1\nThe index of the card to be removed, defaulting the last one\n\n\n\n\ndeck = Deck()\ntest_eq(deck.pop(), Card(3,13))",
    "crumbs": [
      "deck"
    ]
  },
  {
    "objectID": "card.html",
    "href": "card.html",
    "title": "card–A basic playing card",
    "section": "",
    "text": "We will be using numbers to represent playing card clubs and ranks. These are the suits:\nsuits\n\n['♣️', '♠️', '♥️', '♦️']\nFor instance the suit at index 0:\nsuits[0]\n\n'♣️'\nThese are the ranks:\nranks\n\n[None, 'A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']\nFor instance the rank at index 1(notice that there isn’t a playing card at position 0, since we want the ranks to match the indices where possible):\nranks[1]\n\n'A'\nsource",
    "crumbs": [
      "card--A basic playing card"
    ]
  },
  {
    "objectID": "card.html#comparison-operators",
    "href": "card.html#comparison-operators",
    "title": "card–A basic playing card",
    "section": "Comparison operators",
    "text": "Comparison operators\nEquality, less than and greater than work on the suit and rank indices:\n\nsource\n\nCard.__lt__\n\n Card.__lt__ (a:__main__.Card)\n\nReturn self&lt;value.\n\nsource\n\n\nCard.__gt__\n\n Card.__gt__ (a:__main__.Card)\n\nReturn self&gt;value.\n\nsource\n\n\nCard.__eq__\n\n Card.__eq__ (a:__main__.Card)\n\nReturn self==value.\n\ntest_eq(Card(suit=1,rank=3),Card(suit=1,rank=3))\n\n\nassert Card(suit=1,rank=3)&lt;Card(suit=2,rank=3)\n\n\nassert Card(suit=2,rank=3)&gt;Card(suit=1,rank=3)",
    "crumbs": [
      "card--A basic playing card"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "nbdev_cards",
    "section": "",
    "text": "A deck of cards demo of nbdev based on ideias from Think Python 2nd edition by Allen B. Downey.",
    "crumbs": [
      "nbdev_cards"
    ]
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "nbdev_cards",
    "section": "Install",
    "text": "Install\nInstall using:\npip install nbdev-cards\nor:\nconda install -c fastai nbdev-cards",
    "crumbs": [
      "nbdev_cards"
    ]
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "nbdev_cards",
    "section": "How to use",
    "text": "How to use\nThis lib provides a Card class you can use to create, display and compare playing cards:\n\nCard(1,3)\n\n3♠️\n\n\n\nsuits\n\n['♣️', '♠️', '♥️', '♦️']",
    "crumbs": [
      "nbdev_cards"
    ]
  }
]